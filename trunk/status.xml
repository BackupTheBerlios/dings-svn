<?xml version="1.0"?>
<!--
COPYRIGHT AND WARRANTY

DingsBums?! A flexible flashcard application written in Java.

(C) Copyright 2002-2004 by Rick Gruber <rick@vanosten.net>

 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public
 License as published by the Free Software Foundation; either
 version 2 of the License, or (at your option) any later version.

 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Lesser General Public License for more details.

 You should have received a copy of the GNU General Public
 License along with this library; if not, write to the
 Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 Boston, MA 02111-1307, USA.

 See COPYING
-->
<status>
	<developers>
		<person name="Rick Gruber-Riemer" email="rick@vanosten.net" id="vanosten" />
	</developers>

	<!-- Context: doc, gui, code, refactor, tools, i18n, feature, datamodel, other, web -->

	<changes>
		<!-- Add new releases here -->
		<release version="0.3.2" date="TODO: ????">
			<!-- Some action types have associated images. By default, images are defined for 'add', 'fix', 'remove' 'update' and 'hack'. If you add src/documentation/resources/images/<foo>.jpg images, these will automatically be used for entries of type <foo>. -->
			<!--<action dev="JB" type="add" context="admin">Initial Import</action> -->
			<action type="update" context="refactor">Use Toolbox singleton for Preferences and ResourceBundles</action>
		</release>
		<release version="0.3.1" date="2005-02-27">
			<!-- Some action types have associated images. By default, images are defined for 'add', 'fix', 'remove' 'update' and 'hack'. If you add src/documentation/resources/images/<foo>.jpg images, these will automatically be used for entries of type <foo>. -->
			<!--<action dev="JB" type="add" context="admin">Initial Import</action> -->
			<action type="add" context="feature">Use F1 to get help.</action>
			<action type="add" context="feature">Give immediate feedback per field with regards to validity.</action>
			<action type="fix" context="feature">Mnemonic for Edit button in lists changed to &quot;d&quot;.</action>
			<action type="fix" context="gui">Changed the icon of the entry type chooser dialog for new entries.</action>
			<action type="update" context="refactor">Code cleanup for static methods and constants that are only Swing related (moved to DingsSwingConstants).</action>
		</release>
		<release version="0.3.0" date="2005-01-29">
			<action type="fix" context="gui">Change of the look and feel happens immediately.</action>
			<action type="fix" context="gui">Rearranged the menus for better grouping.</action>
			<action type="fix" context="gui">Menu item for editing learning stack information renamed from &quot;Properties&quot; to &quot;Edit Information&quot; and moved to menu &quot;Edit&quot;.</action>
			<action type="update" context="gui">Changed icons from <a href="http://www.gtk.org">GTK</a> stock icons to <a href="http://www.icon-king.com/index.php?p=23">Nuvola</a>.</action>
			<action type="update" context="docs">Change the project website and documentation from pure html to <a href="http://forrest.apache.org">Apache Forrest</a>.</action>
			<action type="update" context="other">Changed the name of the application from <code>Dings?!</code> to <code>DingsBums?!</code>.</action>
			<action type="add" context="feature">The direction of learning can now be inversed. E.g. in a French - English learning stack you can test both from French to English and from English to French.</action>
			<action type="add" context="feature">Added possibility to generate graphs with statistical information.</action>
			<action type="add" context="feature">Added possibility to change the color of the hint texts to be able to adabt to different user interface themes.</action>
			<action type="add" context="feature">The locale and language of the application can be set in the preferences.</action>
			<action type="add" context="feature">Copyright and licence information can now be added to the information panel.</action>
			<action type="remove" context="feature">Removed possibility to see part of the text covered as a hint.</action>
		</release>
		<release version ="0.2.0" date="2004-05-18">
			<!-- This is the second release of Dings?!. This release adds some more functionality to the existing feature set (see other changes). If you have made a learning stack using a previous version please contact me to fix some update problems -->
			<action type="fix" context="gui">YES_NO_CANCEL and YES_NO dialogs now show the right buttons.</action>
			<action type="fix" context="code">Corrected NullPointerExceptions for New Learning Stack.</action>
			<action type="fix" context="code">Show default item in attributes.</action>
			<action type="update" context="code">Changed "level" to "score" to better reflect the functionality of this feature.</action>
			<action type="update" context="gui">Changed button label &quot;Reset&quot; to &quot;Revert&quot;.</action>
			<action type="update" context="gui">InfoVocabView has tabs now.</action>
			<action type="update" context="gui">Removed dependency on JGoodies forms.</action>
			<action type="update" context="gui">Added field description to category in order to be fully compatible with unit. Aligned GUI such that UnitEditView is used by both Unit and Category..</action>
			<action type="update" context="feature">4 attributes instead of 3.</action>
			<action type="add" context="feature">Added possibility to reset the score to the minimum for either all entries or the selected entries.</action>
			<action type="add" context="feature">The settings for score influence the way the current selection of entries is applied to updates: immediately or not while editing and learning.</action>
			<action type="add" context="feature">Added possibility to change the entry type of an existing entry.</action>
			<action type="add" context="feature">New bidi options.</action>
			<action type="add" context="gui">Separator for attributes and others can get custom labels.</action>
		</release>
	</changes>

	<todo>
		<actions priority="next release">
			<action context="i18n" dev="vanosten">Use ResourceBundles for GUI. Externalize all English strings and mnemonics.</action>
			<action context="gui" dev="vanosten">Use configured name for unit and categories (e.g. in stats).</action>
		</actions>
		<actions priority="high">
			<action context="gui" dev="vanosten">Use icons in title for those panels that have an associated menu icon</action>
			<action context="other" dev="vanosten">Correct behavior in Help menu items to contain real information.</action>
			<action context="feature" dev="vanosten">Enable bidi fields: set component orientation</action><!-- ## Enable orientation in EntryEdit and EntryLearn -->
			<action context="tools" dev="vanosten">Change from CVS to Subversion.</action>
			<action context="feature" dev="vanosten">Make ready for Java Webstart</action>
			<action context="feature" dev="vanosten">Show Window with error text instead of Usage on command line</action>
			<action context="gui" dev="vanosten">Disable menu items when page is shown (e.g. in Go menu).</action>
			<action context="feature" dev="vanosten">Add possibility to import vocabularies from http://www.fdicts.com/.</action>
		</actions>
		<actions priority="medium">
			<action context="gui" dev="vanosten">Change validation mechanism to check on lost focus for each field and give visual feedback (see eg. Standi2000).</action>
			<action context="gui" dev="vanosten">Make empty icon for menu items and resolve alt text for Icons.</action>
			<action context="other" dev="vanosten">Promote application in e.g. SwingSightings, nordicos.org, freshmeat.net, www.jars.com, java.com.</action>
			<action context="doc" dev="vanosten">Update linking page with more info about applications (e.g. KDE, Java) and test, whether flashcard progs are really flashcard progs.</action>
			<action context="doc" dev="vanosten">Add license text in all file headers and add author tag to xdocs.</action>
			<action context="code" dev="vanosten">Use JDK 5.0 with Generics. Change build.xml to force building with 1.4. See <a href="http://www-106.ibm.com/developerworks/library/j-forin.html?ca=drs-j5004">Enhance looping in Java 5.0</a> amongst others.</action>
		</actions>
		<actions priority="low">
			<!-- GUI -->
			<action context="gui" dev="vanosten">Decide whether to switch to other widget set. E.g. <a href="http://swingwt.sourceforge.net">SwingWT</a>. Evt. make a parallel GNOME release using <a href="http://java-gnome.sourceforge.net">Java-Gnome</a> and GJC.</action>
			<action context="gui" dev="vanosten">Show EntryType in EntryEdit or LearnOne only if more than one EntryType.</action>
			<action context="gui" dev="vanosten">Change the alignment of the column header to match the alignment of the cell contents in ListViews.</action>
			<action context="gui" dev="vanosten">Adapt Insets to text orientation</action>
			<action context="gui" dev="vanosten">Editor for pronounciation.</action><!-- Fonts: http://www.joconner.com/javai18n/articles/TextDisplay.html -->
			<action context="gui" dev="vanosten">Add possibility for Mnemonics to labels.</action>
			<action context="gui" dev="vanosten">Preferences for background color of valid/invalid input.</action>
			<action context="gui" dev="vanosten"><a href="http://java.sun.com/developer/technicalArticles/JavaLP/JavaToMac/">Bringing your Java Application to Mac OS X</a>.</action>
			<!-- FEATURE -->
			<action context="feature" dev="vanosten">Spell checker: E.g. ASPELL for spell checking (see <a href="http://jedit.org">JEdit</a>, <a href="http://vocabulala.sourceforge.net/deutsch/deutsch.html">Vocabulala</a>, <a href="http://linux.org.mt/projects/jtextcheck/index.html">JTextCheck</a>) or the <a href="http://jazzy.sourceforge.net">Jazzy</a> open source Java spell checker <!-- see also http://www-106.ibm.com/developerworks/library/j-jazzy -->.</action>
			<action context="feature">If file name postfix is ".gz" then assume GZIPped and use java.util.zip.GZIPxStream.</action>
			<action context="feature" dev="vanosten">Search of words using Levenshtein-Algorithm allowing for unsharp search strings.</action>
			<action context="gui" dev="vanosten">Make properties file for image file names in order to be able to supoport different icon sets without recompiling. Use complete set of icons from http://www.deviantart.com/ or http://clipart.freedesktop.org/.</action>
			<action context="web" dev="vanosten">Add link to usage statistics of website: http://dings.berlios.de/usage/ (reqires passwd)</action>
			<!-- REFACTOR -->
			<action context="refactor" dev="vanosten">Evt. replace IDTableModel, IDEditableTableModel with one, where ID is simply not shown in the table, but there is no need to hold an array of IDs.</action>
			<action context="refactor" dev="vanosten">Make sure application can be compiled using <a href="http://gcc.gnu.org/java/">GCJ (the GNU compuiler for the Java language)</a>.</action>
			<!-- gcj - -classpath=/usr/share/gcc-data/i686-pc-linux-gnu/3.3/java:. dings.jar -->
			<action context="code" dev="vanosten">Try JVM test from Jonas</action>
			<!--         try {
            Package p = Package.getPackage("java.lang");
            if (!p.isCompatibleWith("1.4")) {
                String implVer = p.getImplementationVersion();
                String specVer = p.getSpecificationVersion();
                System.err.println("A 1.4 JVM or higher is required for JOnAS. Current JVM implementation version is '"
                        + implVer + "' with specification '" + specVer + "'");
                System.exit(0);
            }
        } catch (NumberFormatException nfe) {
            System.err.println("Cannot detect the running JVM version. Note that JOnAS requires a 1.4 or higher JVM.");
        }
 -->
		</actions>
		<actions priority="very low">
			<action context="feature" dev="vanosten">Voice recording/playing</action>
			<action context="feature" dev="vanosten">Synchronization of files from different sources.</action>
			<action context="feature" dev="vanosten">Printing of lists for offline learning, statistics, ...</action>
			<action context="gui" dev="vanosten">Use new JDK 1.5 functionality for placing window first time (i.e. without preferences).</action>
			<!--     gui.setLocationByPlatform(true); // since JDK 1.5
	gui.setAlwaysOnTop(true);        // since JDK 1.5
-->
		</actions>
<!--
++++++++++++++++++++++++++++++++++++++++++++++
Documentation:
++++++++++++++++++++++++++++++++++++++++++++++
* When edit entry view or learn one then reset scores not available
* When to use category / unit vs. attributes vs. example:
	o fields = free text vs. predefined choice
	o category /unit = same choice for all entries
	o attributes = choice depends on entry type
* Command line arguments
* Apply selection:
	o when reset scores then always instant apply
* File name:
	o do not use # in file names, as the program uses this character as a delimitter in the properties
* Files in user directory:
	o properties
	o log
* Entry Type change:
	o defaults get assigned to attributes. They do not survive
* Matrix of what features (label, visibility, bidi) can be assigned to which field
* All edit views have apply / revert. In preferences direct apply on change
* Statistics:
	o not removed when reset of scores to null -> remove with command in menuitems (not implemented yet)

++++++++++++++++++++++++++++++++++++++++++++++
Other releases:
++++++++++++++++++++++++++++++++++++++++++++++
0.3 "View the Stats":
* printUsage:
	o document in INSTALL
	o make dependent on Swing/Gnome -> abstract in ADings.java
* First user documentation on web:
	-> FAQ
	-> mock-up for multi-learn
* Correct sizing of table in scroll pane
* InfoVocabView should show in middle of screen
* Replace images for dialogs and icons for entry learn one
* Replace TextFields with TextAreas and have # of lines for textareas in preferences
* Status bar: status for saving: underly blue color when boolean (new parameter) set to true
* Set Labels as keyboard accessors to Choice, Textfields etc.:
	o everywhere if possible
	o for dynamic labels add definition in InfoVocab
* Menu items for current view should be disabled
* 1 + 4 some første learn multiple:
	o preference for antal af mulige svar, counter?
	o menuitem
	o ny view
	o EntryDetailsDialog
* Alternative learning algorithm (learn alle i stack med laveste score, lær i samme rækkefølge, gå så videre til næste stack):
	o preferences
	o EntriesCollection
* Use labels for Unit and Category in View titles and menu entries

0.4 "Comfort":
* i18n (European, left to right)
* Accessibility (SetLabelFor(), keyboard shortcuts, ...)
* Code documentation incl. HOWTO code
* Check code artifacts like not used error conditions
* Comply to GNOME HIG (and other UI standards)
* Editor for properties
	* number of entries for learn multiple (eventually show dialog)
* Help implemented (evt. different for GNOME and others)

0.4 "Game Learning":
* Memory, Connect, Crosswords

0.5 "Refactoring"
* Fallback to default if attribute gets deleted
* Global replace for EntryTypeAttributeItems and EntryTypes.
* Separer score, last learned fra rest i entries plus tilføj nyt felt "Note"
	o forandre ReadXML
	o Entry.getXMLString -> getXMLCoreString, getXMLLearnString
	o tilføj mulighed for at editere "Note" i EntryLearnOne og EntryEditView


0.x:
* i18n (non-european, right-to-left BIDI support)
* Validation alternative:  http://www-106.ibm.com/developerworks/java/library/j-dynproxies.html
* Replace hard coded validation rules with more flexible framework (e.g. read rules from XML)
* Export of language structure
* Import:
	* tab separated vocabulary lists
	* Import other vocabulary formats (e.g. KVocabTrainer)
	* Wizard for statistics/frequency based vocabulary file generation, evt. directly coupled with dictionary for fast generation of both origin and target.
* Advanced learning algorithm; Number of learning levels, probability influence
* Statistics:
	o when automatic statistics, then only add StatisticsSet, if actually something has been learned
	o possibility to remove StatisticSets older than Date

++++++++++++++++++++++++++++++++++++++++++++++
Other things, enhancements, todos:
++++++++++++++++++++++++++++++++++++++++++++++
* Validate Model from constructor info with validate functions. Reuse existing validate functions, but give possibility to correct on-the-fly
* Error handling:
	* All handleEvents(): error, if evt is not handled
	* Catch exception when calling System.getProperty()
* Edit button in Learn to directly edit an entry
* "Duplicate" button in EntryEditView and EntryList
* Preserve choice in EntriesChooserView
* Design and State patterns: http://www.javaworld.com/javaworld/jw-02-2001/jw-0216-jhotdraw_p.html
* Eventually it is performance wise not very good to have casts from String to int and vice versa in Preferences
* More features in FileChooser -> http://www.javaworld.com/javaworld/javatips/jw-javatip100.html?
* Why has AEditView its own IAppEventHandler and init()? -> Just inherit from AViewWithButtons?
* Corrective Feedback Paradigm (CFP)
* validate EntryType for entry (already done?)
http://msdn.microsoft.com/Longhorn/default.aspx?pull=/library/en-us/dnsoftware/h
tml/software08052004.asp
* Schoolbus project (http://today.java.net/pub/a/today/2004/09/02/quaestio.htm)


Features: Learning and Entry
++++++++++++++++++++++++++++++++++++++++++++++
* When game learning, then show realtion, pronunciation, relation ... only on demand in dialog to save place
* classification for Relation as combobox: synonym, antonym, false friend. Eventually use pointer instead of writing
* When start of learn (one to one or many to many) then show dialog to ask direction
* Preference: give points for many-tomany learning?
* Chooser: possibility to choose by last learned

Features: Professional Application
++++++++++++++++++++++++++++++++++++++++++++++
* Make available through Java Webstart
* Provide an Installer as e.g. JEdit
* Bundling for Mac: http://www.borderlandconsulting.com/bc/articles/swt_app_bundle.php
* Desktop integration and installer : https://jdic.dev.java.net/ and http://today.java.net/pub/a/today/2004/10/14/jdic1.html

Code Cleanups and Architecture
++++++++++++++++++++++++++++++++++++++++++++++
* Read item21 of EffectiveJavaProgLangGuide
* Unify as much as possible IEntryEditView and IEntryLearnOneView
* Use pointers in models instead of String id references
* Use array of attributes instead of several fields
* Make as many methods final as possible for performance
* Put IAppEventHandler into Interface instead??
* Check use of resetViews()
* Use Actions like described in http://www.javadesktop.org/articles/actions/index.html
* Find a way to combine the titleLabel in ListView and AViewWithButtons
* Preferences/PreferencesEditView: evt. add to onChange() what was changed to minimize processing time.
* Move to a multi-tier application in order to have the GUI abstracted (-> mobile phone, webpage etc.) and to allow for other types of applications (-> Instant messaging)
* Use an inner class for KeyBoardListeners -> Adapter
* why is initializeGUI not called directly in AViewWithButton??
* Set accessor to methods in dings.model to protected as far as possible

User Interface General
++++++++++++++++++++++++++++++++++++++++++++++
* EntriesSelectionView: add buttons to the right of lists to select all / diselect all
-->
	</todo>
</status>
